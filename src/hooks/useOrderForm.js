// hooks/useOrderForm.js
import { useState, useEffect } from 'react';

const useOrderForm = (onClose, product) => {
  // –°–æ—Å—Ç–æ—è–Ω–∏—è —Ñ–æ—Ä–º—ã
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    callTime: ''
  });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ UI
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState({
    isOpen: false,
    message: ''
  });

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
  useEffect(() => {
    setFormData({
      name: '',
      phone: '',
      callTime: ''
    });
    setSuccess(false);
    setError({
      isOpen: false,
      message: ''
    });
  }, []);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (name === 'phone') {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –≤–≤–æ–¥–∞
      const digits = value.replace(/\D/g, '');
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ü–∏—Ñ—Ä (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–¥–∞ +7)
      const limitedDigits = digits.slice(0, 10);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Å —Å–∫–æ–±–∫–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏
      let formattedPhone = '';
      
      if (limitedDigits.length > 0) {
        formattedPhone += '(' + limitedDigits.slice(0, 3);
        
        if (limitedDigits.length > 3) {
          formattedPhone += ') ' + limitedDigits.slice(3, 6);
          
          if (limitedDigits.length > 6) {
            formattedPhone += '-' + limitedDigits.slice(6, 8);
            
            if (limitedDigits.length > 8) {
              formattedPhone += '-' + limitedDigits.slice(8, 10);
            }
          }
        } else {
          formattedPhone += ')';
        }
      }
      
      setFormData(prev => ({ 
        ...prev, 
        [name]: formattedPhone 
      }));
    } else {
      setFormData(prev => ({ 
        ...prev, 
        [name]: value 
      }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const cleanPhone = formData.phone.replace(/\D/g, '');
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (cleanPhone.length < 10) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      setError({
        isOpen: true,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä)'
      });
      return;
    }
    
    setIsSubmitting(true);
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const formattedPhone = '+7 ' + formData.phone;
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    const getReadableTime = (callTimeValue) => {
      if (!callTimeValue) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const [day, hour] = callTimeValue.split('-');
      const hourNum = parseInt(hour, 10);
      
      const today = new Date();
      const targetDate = new Date();
      
      if (day === 'tomorrow') {
        targetDate.setDate(today.getDate() + 1);
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–î–î.–ì–ì–ì–ì
      const month = String(targetDate.getMonth() + 1).padStart(2, '0');
      const date = String(targetDate.getDate()).padStart(2, '0');
      const year = targetDate.getFullYear();
      
      const formattedDate = `${month}.${date}.${year}`;
      
      return `${formattedDate} —Å ${hourNum}:00 –¥–æ ${hourNum + 1}:00`;
    };

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞) –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const getSimpleDay = (callTimeValue) => {
      if (!callTimeValue) return '';
      
      const [day, hour] = callTimeValue.split('-');
      const hourNum = parseInt(hour, 10);
      
      const dayText = day === 'today' ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞';
      return `${dayText} —Å ${hourNum}:00 –¥–æ ${hourNum + 1}:00`;
    };
    
    // –ò–º–∏—Ç–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
    try {
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = `
üìù *–ù–û–í–´–ô –ó–ê–ö–ê–ó (–ü–†–û–î–ê–ñ–ê)* üìù

üõçÔ∏è *${product.name}* (${product.height})
üí∞ *–¶–µ–Ω–∞:* ${product.price.toLocaleString('ru-RU')} ‚ÇΩ

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formattedPhone}
üïí *–°–æ–∑–≤–æ–Ω:* ${getReadableTime(formData.callTime)}
      `.trim();
      
      // –ò–º–∏—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
      setTimeout(() => {
        setIsSubmitting(false);
        setSuccess(true);
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        const successMessage = `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, ${formData.name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ${getSimpleDay(formData.callTime)}.`;
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        setError({
          isOpen: true,
          message: successMessage
        });
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          onClose();
        }, 15000);
      }, 1500);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      setError({
        isOpen: true,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
      setIsSubmitting(false);
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
  const closeErrorAlert = () => {
    setError({
      isOpen: false,
      message: ''
    });
  };

  return {
    formData,
    error,
    success,
    isSubmitting,
    isMobile,
    handleChange,
    handleSubmit,
    closeErrorAlert,
  };
};

export default useOrderForm;