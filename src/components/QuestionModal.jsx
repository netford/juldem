// QuestionModal.jsx
import React, { useEffect, useState } from 'react';
import ReactDOM from 'react-dom';
import { X, MessageSquare } from 'lucide-react';
import styles from './QuestionModal.module.css';

const QuestionModal = ({ isOpen, onClose }) => {
  const [formData, setFormData] = useState({
    name: '',
    contact: '',
    message: ''
  });
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [success, setSuccess] = useState(false);
  const [error, setError] = useState({
    isOpen: false,
    message: ''
  });
  const [validationErrors, setValidationErrors] = useState({
    name: false,
    contact: false,
    message: false
  });
  const [isMobile, setIsMobile] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      setFormData({
        name: '',
        contact: '',
        message: ''
      });
      setSuccess(false);
      setValidationErrors({
        name: false,
        contact: false,
        message: false
      });
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      document.body.style.overflow = 'hidden';
    }

    return () => {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—è
    setValidationErrors(prev => ({
      ...prev,
      [name]: false
    }));
    
    setFormData(prev => ({ 
      ...prev, 
      [name]: value 
    }));
  };

  // –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º—ã
  const validateForm = () => {
    const newValidationErrors = {
      name: !formData.name.trim(),
      contact: !formData.contact.trim(),
      message: !formData.message.trim()
    };
    
    setValidationErrors(newValidationErrors);
    
    return !Object.values(newValidationErrors).some(error => error);
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ñ–æ—Ä–º—ã
    if (!validateForm()) {
      setError({
        isOpen: true,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è —Ñ–æ—Ä–º—ã'
      });
      return;
    }
    
    setIsSubmitting(true);
    
    try {
      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
      const message = `
üì® *–ù–û–í–´–ô –í–û–ü–†–û–°* üì®

üë§ *–ò–º—è:* ${formData.name}
üìû *–ö–æ–Ω—Ç–∞–∫—Ç:* ${formData.contact}
‚ùì *–í–æ–ø—Ä–æ—Å:* ${formData.message}
      `.trim();
      
      const botToken = '7964652895:AAF2XFFz8stkwABk7Hdo2tOOVj0QhPglMYU';
      const chatId = '6249732484';
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        }),
      });
      
      const data = await response.json();
      
      if (data.ok) {
        setIsSubmitting(false);
        setSuccess(true);
        
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
        setTimeout(() => {
          onClose();
        }, 10000);
      } else {
        throw new Error(data.description || 'Telegram API error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      
      setError({
        isOpen: true,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
      setIsSubmitting(false);
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
  const closeErrorAlert = () => {
    setError({
      isOpen: false,
      message: ''
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen) return null;

  const modalContent = (
    <div className={styles.overlay} onClick={(e) => e.target === e.currentTarget && onClose()}>
      <div className={styles.modalContent}>
        {/* –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è */}
        <button
          onClick={onClose}
          className={styles.closeButton}
        >
          <X size={isMobile ? 22 : 28} strokeWidth={2.5} />
        </button>

        {success ? (
          <div className={styles.successContainer}>
            <div className={styles.iconWrapper}>
              <svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="3" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="20 6 9 17 4 12"></polyline>
              </svg>
            </div>
            <h2 className={styles.title}>
              –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å, {formData.name}!
            </h2>
            <p className={styles.message}>
              –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.
            </p>
            <button onClick={onClose} className={styles.okButton}>
              –û–ö
            </button>
          </div>
        ) : (
          <>
            <div className={styles.header}>
              <h2 className={styles.title}>–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å</h2>
              <p className={styles.subtitle}>
                –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å
              </p>
            </div>
            
            {error.isOpen && (
              <div className={styles.errorContainer}>
                <div className={styles.errorIcon}>
                  <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                    <circle cx="12" cy="12" r="10"></circle>
                    <line x1="12" y1="8" x2="12" y2="12"></line>
                    <line x1="12" y1="16" x2="12.01" y2="16"></line>
                  </svg>
                </div>
                <div className={styles.errorMessage}>
                  {error.message}
                </div>
              </div>
            )}
            
            <form className={styles.form} onSubmit={handleSubmit}>
              <div className={styles.formGroup}>
                <label htmlFor="name" className={styles.label}>
                  –í–∞—à–µ –∏–º—è <span className={styles.requiredMark}>*</span>
                </label>
                <input 
                  type="text" 
                  id="name" 
                  name="name" 
                  value={formData.name} 
                  onChange={handleChange} 
                  required 
                  className={`${styles.input} ${validationErrors.name ? styles.inputError : ''}`}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è"
                />
                {validationErrors.name && (
                  <div className={styles.errorMessage}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è</div>
                )}
              </div>
              
              <div className={styles.formGroup}>
                <label htmlFor="contact" className={styles.label}>
                  –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ Email <span className={styles.requiredMark}>*</span>
                </label>
                <input 
                  type="text"
                  id="contact" 
                  name="contact" 
                  value={formData.contact} 
                  onChange={handleChange} 
                  required 
                  className={`${styles.input} ${validationErrors.contact ? styles.inputError : ''}`}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                />
                {validationErrors.contact && (
                  <div className={styles.errorMessage}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</div>
                )}
              </div>
              
              <div className={styles.formGroup}>
                <label htmlFor="message" className={styles.label}>
                  –í–∞—à –≤–æ–ø—Ä–æ—Å <span className={styles.requiredMark}>*</span>
                </label>
                <textarea 
                  id="message" 
                  name="message" 
                  value={formData.message} 
                  onChange={handleChange} 
                  required 
                  className={`${styles.input} ${styles.textarea} ${validationErrors.message ? styles.inputError : ''}`}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å"
                  rows={5}
                />
                {validationErrors.message && (
                  <div className={styles.errorMessage}>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å</div>
                )}
              </div>
              
              <button 
                type="submit" 
                className={styles.submitButton}
                disabled={isSubmitting}
              >
                {isSubmitting ? (
                  <>
                    <svg width="20" height="20" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg" className={styles.spinner}>
                      <circle cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" strokeDasharray="60 28" />
                    </svg>
                    –û—Ç–ø—Ä–∞–≤–∫–∞...
                  </>
                ) : (
                  <>
                    <MessageSquare size={20} />
                    –û—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–ø—Ä–æ—Å
                  </>
                )}
              </button>
            </form>
          </>
        )}
      </div>
    </div>
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ReactDOM.createPortal –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –∫–æ–Ω—Ü–µ body
  return ReactDOM.createPortal(
    modalContent, 
    document.body
  );
};

export default QuestionModal;