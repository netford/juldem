import React, { useEffect, useState } from 'react';
import { X } from 'lucide-react';
import ErrorAlert from './ErrorAlert';
import ReactDOM from 'react-dom';

const OrderModal = ({ isOpen, onClose, product }) => {
  const [formData, setFormData] = useState({
    name: '',
    phone: '',
    callTime: ''
  });
  const [timeSlots, setTimeSlots] = useState([]);
  const [error, setError] = useState({
    isOpen: false,
    message: ''
  });
  const [isMobile, setIsMobile] = useState(false);

  // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    
    checkMobile();
    window.addEventListener('resize', checkMobile);
    
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    if (isOpen) {
      setTimeSlots(generateTimeSlots());
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É –ø—Ä–∏ –∫–∞–∂–¥–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
      setFormData({
        name: '',
        phone: '',
        callTime: ''
      });
      
      // –ë–ª–æ–∫–∏—Ä—É–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      document.body.style.overflow = 'hidden';
    }

    return () => {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
      document.body.style.overflow = 'auto';
    };
  }, [isOpen]);

  // –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤
  const generateTimeSlots = () => {
    const slots = [];
    const now = new Date();
    const currentHour = now.getHours();
    const currentMinutes = now.getMinutes();

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    for (let hour = 10; hour < 19; hour++) {
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ —á–∞—Å—ã
      if (hour < currentHour) continue;
      
      // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–∫—É—â–∏–π —á–∞—Å, –µ—Å–ª–∏ –¥–æ –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Å—Ç–∞–ª–æ—Å—å –º–µ–Ω–µ–µ 15 –º–∏–Ω—É—Ç
      if (hour === currentHour && currentMinutes > 45) continue;

      slots.push({
        value: `today-${hour}`,
        label: `–°–µ–≥–æ–¥–Ω—è —Å ${hour}:00 –¥–æ ${hour + 1}:00`
      });
    }

    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª–æ—Ç–æ–≤ –Ω–∞ –∑–∞–≤—Ç—Ä–∞
    for (let hour = 10; hour < 19; hour++) {
      slots.push({
        value: `tomorrow-${hour}`,
        label: `–ó–∞–≤—Ç—Ä–∞ —Å ${hour}:00 –¥–æ ${hour + 1}:00`
      });
    }

    return slots;
  };

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–ª–µ–π —Ñ–æ—Ä–º—ã
  const handleChange = (e) => {
    const { name, value } = e.target;
    
    // –û—Å–æ–±–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (name === 'phone') {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ –≤–≤–æ–¥–∞
      const digits = value.replace(/\D/g, '');
      
      // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 10 —Ü–∏—Ñ—Ä (–±–µ–∑ —É—á–µ—Ç–∞ –∫–æ–¥–∞ +7)
      const limitedDigits = digits.slice(0, 10);
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Å —Å–∫–æ–±–∫–∞–º–∏ –∏ –¥–µ—Ñ–∏—Å–∞–º–∏
      let formattedPhone = '';
      
      if (limitedDigits.length > 0) {
        formattedPhone += '(' + limitedDigits.slice(0, 3);
        
        if (limitedDigits.length > 3) {
          formattedPhone += ') ' + limitedDigits.slice(3, 6);
          
          if (limitedDigits.length > 6) {
            formattedPhone += '-' + limitedDigits.slice(6, 8);
            
            if (limitedDigits.length > 8) {
              formattedPhone += '-' + limitedDigits.slice(8, 10);
            }
          }
        } else {
          formattedPhone += ')';
        }
      }
      
      setFormData(prev => ({ 
        ...prev, 
        [name]: formattedPhone 
      }));
    } else {
      setFormData(prev => ({ 
        ...prev, 
        [name]: value 
      }));
    }
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏–∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    const cleanPhone = formData.phone.replace(/\D/g, '');
    
    // –ü—Ä–æ—Å—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    if (cleanPhone.length < 10) {
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      setError({
        isOpen: true,
        message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (–Ω–µ –º–µ–Ω–µ–µ 10 —Ü–∏—Ñ—Ä)'
      });
      return;
    }
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    const formattedPhone = '+7 ' + formData.phone;
    
    // –ü–æ–ª—É—á–∞–µ–º —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –¥–∞—Ç–æ–π
    const getReadableTime = (callTimeValue) => {
      if (!callTimeValue) return '–ù–µ —É–∫–∞–∑–∞–Ω–æ';
      
      const [day, hour] = callTimeValue.split('-');
      const hourNum = parseInt(hour, 10);
      
      const today = new Date();
      const targetDate = new Date();
      
      if (day === 'tomorrow') {
        targetDate.setDate(today.getDate() + 1);
      }
      
      // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ú–ú.–î–î.–ì–ì–ì–ì
      const month = String(targetDate.getMonth() + 1).padStart(2, '0');
      const date = String(targetDate.getDate()).padStart(2, '0');
      const year = targetDate.getFullYear();
      
      const formattedDate = `${month}.${date}.${year}`;
      
      return `${formattedDate} —Å ${hourNum}:00 –¥–æ ${hourNum + 1}:00`;
    };

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Å—Ç–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–Ω—è (—Å–µ–≥–æ–¥–Ω—è/–∑–∞–≤—Ç—Ä–∞) –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    const getSimpleDay = (callTimeValue) => {
      if (!callTimeValue) return '';
      
      const [day, hour] = callTimeValue.split('-');
      const hourNum = parseInt(hour, 10);
      
      const dayText = day === 'today' ? '—Å–µ–≥–æ–¥–Ω—è' : '–∑–∞–≤—Ç—Ä–∞';
      return `${dayText} —Å ${hourNum}:00 –¥–æ ${hourNum + 1}:00`;
    };
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
    const message = `
üìù *–ù–û–í–´–ô –ó–ê–ö–ê–ó* üìù

üõçÔ∏è *–¢–æ–≤–∞—Ä:* –ö—É–ø–∞–ª—å–Ω–∏–∫ ${product.name}
üìè *–†–æ—Å—Ç:* ${product.height}
üí∞ *–¶–µ–Ω–∞:* ${product.price.toLocaleString('ru-RU')} ‚ÇΩ

üë§ *–ö–ª–∏–µ–Ω—Ç:* ${formData.name}
üìû *–¢–µ–ª–µ—Ñ–æ–Ω:* ${formattedPhone}
üïí *–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:* ${getReadableTime(formData.callTime)}
    `.trim();
    
    const botToken = '7964652895:AAF2XFFz8stkwABk7Hdo2tOOVj0QhPglMYU';
    const chatId = '6249732484';
    
    try {
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API
      const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: chatId,
          text: message,
          parse_mode: 'Markdown'
        }),
      });
      
      const data = await response.json();
      
      if (data.ok) {
        // –§–æ—Ä–º–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—Ö–∞
        const successMessage = `–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–∫–∞–∑, ${formData.name}! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ ${getSimpleDay(formData.callTime)}.`;
        
        // –£—Å–ø–µ—à–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
        setError({
          isOpen: true,
          message: successMessage
        });
        
        // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∑–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        setTimeout(() => {
          onClose();
        }, 10000);
      } else {
        // –û—à–∏–±–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ API Telegram
        throw new Error(data.description || 'Telegram API error');
      }
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏:', error);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      setError({
        isOpen: true,
        message: '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
      });
    }
  };

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞ —Å –æ—à–∏–±–∫–æ–π
  const closeErrorAlert = () => {
    setError({
      isOpen: false,
      message: ''
    });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–ª–∞–≤–∏—à–∏ ESC –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  useEffect(() => {
    const handleEscape = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleEscape);
    }

    return () => {
      document.removeEventListener('keydown', handleEscape);
    };
  }, [isOpen, onClose]);

  if (!isOpen || !product) return null;

  // –°—Ç–∏–ª–∏ –¥–ª—è –≤–Ω–µ—à–Ω–µ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ (–æ–≤–µ—Ä–ª–µ–π)
  const overlayStyles = {
    position: 'fixed',
    top: 0,
    left: 0,
    right: 0,
    bottom: 0,
    backgroundColor: 'rgba(0, 0, 0, 0.9)',
    display: 'flex',
    alignItems: 'flex-start', // –ò–∑–º–µ–Ω–µ–Ω–æ —Å center –Ω–∞ flex-start
    justifyContent: 'center',
    zIndex: 9999,
    padding: isMobile ? '1rem' : '2rem',
    overflow: 'auto' // –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalStyles = {
    background: '#262626',
    borderRadius: isMobile ? '12px' : '16px',
    maxWidth: '600px',
    width: isMobile ? 'calc(100% - 20px)' : '100%', // –ü–æ—á—Ç–∏ –ø–æ–ª–Ω–∞—è —à–∏—Ä–∏–Ω–∞ –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
    position: 'relative',
    padding: isMobile ? '1.5rem' : '2.5rem',
    color: '#fff',
    boxShadow: '0 10px 30px rgba(0,0,0,0.3)',
    margin: isMobile ? '30px 10px' : '50px auto'
  };

  const headingStyles = {
    fontSize: isMobile ? '1.6rem' : '2rem',
    marginBottom: isMobile ? '1rem' : '1.5rem',
    color: '#fff',
    textAlign: 'center'
  };

  const productInfoStyles = {
    display: 'flex',
    gap: isMobile ? '10px' : '15px',
    marginBottom: isMobile ? '1rem' : '1.5rem',
    background: 'rgba(0,0,0,0.2)',
    padding: isMobile ? '10px' : '15px',
    borderRadius: '8px'
  };

  const productImageStyles = {
    width: isMobile ? '70px' : '90px',
    height: isMobile ? '70px' : '90px',
    minWidth: isMobile ? '70px' : '90px',
    borderRadius: '6px',
    overflow: 'hidden',
    background: '#1a1a1a',
    border: '1px solid #333'
  };

  const imageStyles = {
    width: '100%',
    height: '100%',
    objectFit: 'cover'
  };

  const productDetailsStyles = {
    flex: 1
  };

  const productNameStyles = {
    fontSize: isMobile ? '1rem' : '1.1rem',
    fontWeight: 600,
    marginBottom: '5px',
    color: '#fff'
  };

  const productParamsStyles = {
    color: '#ccc',
    fontSize: isMobile ? '0.9rem' : '0.95rem',
    lineHeight: 1.5
  };

  const noteStyles = {
    fontSize: isMobile ? '0.8rem' : '0.9rem',
    color: '#ccc',
    marginBottom: isMobile ? '1rem' : '1.5rem'
  };

  const formStyles = {
    display: 'flex',
    flexDirection: 'column',
    gap: isMobile ? '12px' : '15px'
  };

  const formGroupStyles = {
    display: 'flex',
    flexDirection: 'column',
    gap: '5px'
  };

  const labelStyles = {
    color: '#ccc',
    fontSize: isMobile ? '0.85rem' : '0.9rem'
  };

  const inputStyles = {
    padding: isMobile ? '8px 12px' : '10px 15px',
    borderRadius: '8px',
    border: '1px solid #444',
    background: '#1a1a1a',
    color: '#fff',
    fontSize: isMobile ? '0.95rem' : '1rem'
  };

  const buttonStyles = {
    display: 'block',
    width: '100%',
    padding: isMobile ? '0.8rem' : '1rem',
    backgroundColor: 'var(--color-primary, #0066cc)',
    color: '#fff',
    border: 'none',
    borderRadius: '8px',
    fontSize: isMobile ? '0.95rem' : '1rem',
    cursor: 'pointer',
    transition: 'background-color 0.3s ease',
    marginTop: '10px'
  };

  // –°—Ç–∏–ª–∏ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
  const closeButtonStyles = {
    position: 'absolute',
    top: isMobile ? '0.5rem' : '1rem',
    right: isMobile ? '0.5rem' : '1rem',
    background: 'rgba(0, 0, 0, 0.7)',
    border: '2px solid rgba(255, 255, 255, 0.5)',
    width: isMobile ? '36px' : '44px',
    height: isMobile ? '36px' : '44px',
    borderRadius: '50%',
    display: 'flex',
    alignItems: 'center',
    justifyContent: 'center',
    cursor: 'pointer',
    color: 'white',
    zIndex: 2,
    transition: 'all 0.3s ease',
    padding: isMobile ? '6px' : '8px'
  };

  // –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç–∞–ª –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –∫–æ–Ω—Ü–µ body
  // –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –∏–∑–±–µ–∂–∞—Ç—å –ø—Ä–æ–±–ª–µ–º —Å z-index –∏ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
  const modalContent = (
    <>
      <div 
        style={overlayStyles} 
        onClick={(e) => e.target === e.currentTarget && onClose()}
      >
        <div style={modalStyles}>
          <button
            onClick={onClose}
            style={closeButtonStyles}
            onMouseOver={(e) => {
              e.currentTarget.style.background = 'rgba(0, 0, 0, 0.9)';
              e.currentTarget.style.borderColor = 'white';
            }}
            onMouseOut={(e) => {
              e.currentTarget.style.background = 'rgba(0, 0, 0, 0.7)';
              e.currentTarget.style.borderColor = 'rgba(255, 255, 255, 0.5)';
            }}
          >
            <X size={isMobile ? 22 : 28} strokeWidth={2.5} />
          </button>

          <h2 style={headingStyles}>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</h2>

          {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ */}
          <div style={productInfoStyles}>
            {product.image && (
              <div style={productImageStyles}>
                <img src={product.image} alt={product.name} style={imageStyles} />
              </div>
            )}
            <div style={productDetailsStyles}>
              <p style={productNameStyles}>–ö—É–ø–∞–ª—å–Ω–∏–∫ {product.name}</p>
              <p style={productParamsStyles}>
                –†–æ—Å—Ç: {product.height}
                <br />
                –¶–µ–Ω–∞: {product.price.toLocaleString('ru-RU')} ‚ÇΩ
              </p>
            </div>
          </div>

          <p style={noteStyles}>
            –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤–∞–º–∏ –≤—Ä–µ–º—è –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∞–º–∏ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞.
          </p>
              
          <form style={formStyles} onSubmit={handleSubmit}>
            <div style={formGroupStyles}>
              <label htmlFor="name" style={labelStyles}>–í–∞—à–µ –∏–º—è:</label>
              <input 
                type="text" 
                id="name" 
                name="name" 
                value={formData.name} 
                onChange={handleChange} 
                required 
                style={inputStyles}
              />
            </div>
              
            <div style={formGroupStyles}>
              <label htmlFor="phone" style={labelStyles}>–¢–µ–ª–µ—Ñ–æ–Ω:</label>
              <div style={{
                position: 'relative',
                display: 'flex',
                alignItems: 'center'
              }}>
                <span style={{
                  position: 'absolute',
                  left: '15px',
                  color: '#fff'
                }}>+7 </span>
                <input 
                  type="tel" 
                  id="phone" 
                  name="phone" 
                  value={formData.phone} 
                  onChange={handleChange}
                  placeholder="(___) ___-__-__"
                  required 
                  style={{
                    ...inputStyles,
                    paddingLeft: '40px'
                  }}
                />
              </div>
            </div>
              
            <div style={formGroupStyles}>
              <label htmlFor="callTime" style={labelStyles}>–£–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∑–≤–æ–Ω–∫–∞:</label>
              <select 
                id="callTime" 
                name="callTime" 
                value={formData.callTime} 
                onChange={handleChange} 
                required
                style={{
                  ...inputStyles, 
                  appearance: 'none',
                  height: isMobile ? '40px' : 'auto'
                }}
              >
                <option value="">–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è</option>
                {timeSlots.map(slot => (
                  <option key={slot.value} value={slot.value}>
                    {slot.label}
                  </option>
                ))}
              </select>
            </div>
              
            <button 
              type="submit" 
              style={buttonStyles}
              onMouseOver={(e) => {
                e.currentTarget.style.backgroundColor = 'var(--color-accent, #0056b3)';
              }}
              onMouseOut={(e) => {
                e.currentTarget.style.backgroundColor = 'var(--color-primary, #0066cc)';
              }}
            >
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å
            </button>
          </form>
        </div>
      </div>

      {/* –ö–∞—Å—Ç–æ–º–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –æ—à–∏–±–æ–∫ */}
      <ErrorAlert 
        isOpen={error.isOpen}
        onClose={closeErrorAlert}
        message={error.message}
      />
    </>
  );

  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ReactDOM.createPortal –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –≤ –∫–æ–Ω—Ü–µ body
  return ReactDOM.createPortal(
    modalContent, 
    document.body
  );
};

export default OrderModal;